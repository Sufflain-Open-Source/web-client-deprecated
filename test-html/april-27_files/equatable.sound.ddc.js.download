define(['dart_sdk', 'packages/collection/src/canonicalized_map', 'packages/collection/src/comparators'], (function load__packages__equatable__equatable(dart_sdk, packages__collection__src__canonicalized_map, packages__collection__src__comparators) {
  'use strict';
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const iterable_extensions = packages__collection__src__canonicalized_map.src__iterable_extensions;
  const equality = packages__collection__src__comparators.src__equality;
  var equatable_mixin = Object.create(dart.library);
  var equatable_utils = Object.create(dart.library);
  var equatable = Object.create(dart.library);
  var equatable_config = Object.create(dart.library);
  var equatable$ = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $fold = dartx.fold;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $keys = dartx.keys;
  var $hashCode = dartx.hashCode;
  var $forEach = dartx.forEach;
  var $rightShift = dartx['>>'];
  var $toString = dartx.toString;
  var $map = dartx.map;
  var $join = dartx.join;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    intAnddynamicToint: () => (T.intAnddynamicToint = dart.constFn(dart.fnType(core.int, [core.int, dart.dynamic])))(),
    dynamicAnddynamicToint: () => (T.dynamicAnddynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic, dart.dynamic])))(),
    dynamicTovoid: () => (T.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ObjectNToString: () => (T.ObjectNToString = dart.constFn(dart.fnType(core.String, [T.ObjectN()])))(),
    DefaultEqualityOfNever: () => (T.DefaultEqualityOfNever = dart.constFn(equality.DefaultEquality$(dart.Never)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(equatable_utils._combine, T.intAnddynamicToint());
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: T.DefaultEqualityOfNever().prototype
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: equality.DeepCollectionEquality.prototype,
        [DeepCollectionEquality__unordered]: false,
        [DeepCollectionEquality__base]: C[2] || CT.C2
      });
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "package:equatable/src/equatable_mixin.dart",
    "org-dartlang-app:///packages/equatable/src/equatable_config.dart",
    "package:equatable/src/equatable_config.dart",
    "package:equatable/src/equatable.dart"
  ];
  equatable_mixin.EquatableMixin = class EquatableMixin extends core.Object {};
  equatable_mixin.EquatableMixin[dart.mixinOn] = Object => {
    class EquatableMixin extends Object {
      get stringify() {
        return null;
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || equatable_mixin.EquatableMixin.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && equatable_utils.equals(this.props, other.props);
      }
      get hashCode() {
        return (this[$runtimeType].hashCode ^ equatable_utils.mapPropsToHashCode(this.props)) >>> 0;
      }
      toString() {
        switch (this.stringify) {
          case true:
          {
            return equatable_utils.mapPropsToString(this[$runtimeType], this.props);
          }
          case false:
          {
            return dart.str(this[$runtimeType]);
          }
          default:
          {
            return equatable_config.EquatableConfig.stringify === true ? equatable_utils.mapPropsToString(this[$runtimeType], this.props) : dart.str(this[$runtimeType]);
          }
        }
      }
    }
    dart.defineExtensionMethods(EquatableMixin, ['_equals', 'toString']);
    dart.defineExtensionAccessors(EquatableMixin, ['hashCode']);
    return EquatableMixin;
  };
  (equatable_mixin.EquatableMixin[dart.mixinNew] = function() {
  }).prototype = equatable_mixin.EquatableMixin.prototype;
  dart.addTypeTests(equatable_mixin.EquatableMixin);
  dart.addTypeCaches(equatable_mixin.EquatableMixin);
  equatable_mixin.EquatableMixin[dart.implements] = () => [core.Object];
  dart.setGetterSignature(equatable_mixin.EquatableMixin, () => ({
    __proto__: dart.getGetters(equatable_mixin.EquatableMixin.__proto__),
    stringify: dart.nullable(core.bool)
  }));
  dart.setLibraryUri(equatable_mixin.EquatableMixin, I[0]);
  equatable_utils.mapPropsToHashCode = function mapPropsToHashCode(props) {
    return equatable_utils._finish(props == null ? 0 : props[$fold](core.int, 0, C[0] || CT.C0));
  };
  equatable_utils.equals = function equals(list1, list2) {
    let t0, t0$;
    if (list1 == list2) return true;
    if (list1 == null || list2 == null) return false;
    let length = list1[$length];
    if (length !== list2[$length]) return false;
    for (let i = 0; i < length; i = i + 1) {
      let unit1 = list1[$_get](i);
      let unit2 = list2[$_get](i);
      if (equatable_utils._isEquatable(unit1) && equatable_utils._isEquatable(unit2)) {
        if (!dart.equals(unit1, unit2)) return false;
      } else if (core.Iterable.is(unit1) || core.Map.is(unit1)) {
        if (!equatable_utils._equality.equals(unit1, unit2)) return false;
      } else if (!dart.equals((t0 = unit1, t0 == null ? null : dart.runtimeType(t0)), (t0$ = unit2, t0$ == null ? null : dart.runtimeType(t0$)))) {
        return false;
      } else if (!dart.equals(unit1, unit2)) {
        return false;
      }
    }
    return true;
  };
  equatable_utils._isEquatable = function _isEquatable(object) {
    return equatable$.Equatable.is(object) || equatable_mixin.EquatableMixin.is(object);
  };
  equatable_utils._combine = function _combine(hash, object) {
    if (core.Map.is(object)) {
      iterable_extensions['IterableExtension|sorted'](dart.dynamic, object[$keys], dart.fn((a, b) => dart.hashCode(a) - dart.hashCode(b), T.dynamicAnddynamicToint()))[$forEach](dart.fn(key => {
        hash = (hash ^ equatable_utils._combine(hash, [key, object[$_get](key)])) >>> 0;
      }, T.dynamicTovoid()));
      return hash;
    }
    if (core.Iterable.is(object)) {
      for (let value of object) {
        hash = (hash ^ equatable_utils._combine(hash, value)) >>> 0;
      }
      return (hash ^ object[$length]) >>> 0;
    }
    hash = 536870911 & hash + dart.hashCode(object);
    hash = 536870911 & hash + ((524287 & hash) << 10);
    return (hash ^ hash[$rightShift](6)) >>> 0;
  };
  equatable_utils._finish = function _finish(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3);
    hash = (hash ^ hash[$rightShift](11)) >>> 0;
    return 536870911 & hash + ((16383 & hash) << 15);
  };
  equatable_utils.mapPropsToString = function mapPropsToString(runtimeType, props) {
    return dart.str(runtimeType) + "(" + props[$map](core.String, dart.fn(prop => dart.toString(prop), T.ObjectNToString()))[$join](", ") + ")";
  };
  var DeepCollectionEquality__unordered = dart.privateName(equality, "DeepCollectionEquality._unordered");
  var DeepCollectionEquality__base = dart.privateName(equality, "DeepCollectionEquality._base");
  dart.defineLazy(equatable_utils, {
    /*equatable_utils._equality*/get _equality() {
      return C[1] || CT.C1;
    }
  }, false);
  equatable_config.EquatableConfig = class EquatableConfig extends core.Object {
    static get stringify() {
      let t0;
      if (equatable_config.EquatableConfig._stringify == null) {
        if (!dart.fn(() => {
          equatable_config.EquatableConfig._stringify = true;
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[1], 23, 14, "() {\n        _stringify = true;\n        return true;\n      }()");
      }
      t0 = equatable_config.EquatableConfig._stringify;
      return t0 == null ? equatable_config.EquatableConfig._stringify = false : t0;
    }
    static set stringify(value) {
      return equatable_config.EquatableConfig._stringify = value;
    }
  };
  (equatable_config.EquatableConfig.new = function() {
    ;
  }).prototype = equatable_config.EquatableConfig.prototype;
  dart.addTypeTests(equatable_config.EquatableConfig);
  dart.addTypeCaches(equatable_config.EquatableConfig);
  dart.setLibraryUri(equatable_config.EquatableConfig, I[2]);
  dart.defineLazy(equatable_config.EquatableConfig, {
    /*equatable_config.EquatableConfig._stringify*/get _stringify() {
      return null;
    },
    set _stringify(_) {}
  }, false);
  equatable$.Equatable = class Equatable extends core.Object {
    get stringify() {
      return null;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || equatable$.Equatable.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && equatable_utils.equals(this.props, other.props);
    }
    get hashCode() {
      return (this[$runtimeType].hashCode ^ equatable_utils.mapPropsToHashCode(this.props)) >>> 0;
    }
    toString() {
      switch (this.stringify) {
        case true:
        {
          return equatable_utils.mapPropsToString(this[$runtimeType], this.props);
        }
        case false:
        {
          return dart.str(this[$runtimeType]);
        }
        default:
        {
          return equatable_config.EquatableConfig.stringify === true ? equatable_utils.mapPropsToString(this[$runtimeType], this.props) : dart.str(this[$runtimeType]);
        }
      }
    }
  };
  (equatable$.Equatable.new = function() {
    ;
  }).prototype = equatable$.Equatable.prototype;
  dart.addTypeTests(equatable$.Equatable);
  dart.addTypeCaches(equatable$.Equatable);
  dart.setGetterSignature(equatable$.Equatable, () => ({
    __proto__: dart.getGetters(equatable$.Equatable.__proto__),
    stringify: dart.nullable(core.bool)
  }));
  dart.setLibraryUri(equatable$.Equatable, I[3]);
  dart.defineExtensionMethods(equatable$.Equatable, ['_equals', 'toString']);
  dart.defineExtensionAccessors(equatable$.Equatable, ['hashCode']);
  dart.trackLibraries("packages/equatable/equatable", {
    "package:equatable/src/equatable_mixin.dart": equatable_mixin,
    "package:equatable/src/equatable_utils.dart": equatable_utils,
    "package:equatable/equatable.dart": equatable,
    "package:equatable/src/equatable_config.dart": equatable_config,
    "package:equatable/src/equatable.dart": equatable$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["src/equatable_mixin.dart","src/equatable_utils.dart","src/equatable_config.dart","src/equatable.dart"],"names":[],"mappings":"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","file":"equatable.sound.ddc.js"}');
  // Exports:
  return {
    src__equatable_mixin: equatable_mixin,
    src__equatable_utils: equatable_utils,
    equatable: equatable,
    src__equatable_config: equatable_config,
    src__equatable: equatable$
  };
}));

//# sourceMappingURL=equatable.sound.ddc.js.map
